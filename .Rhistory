#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A list of transport emission factors.
get_transport_emission_factors <- function(country) {
# Ensure the built-in dataset exists
if (!exists("transport_emission_factors")) {
stop("Error: transport_emission_factors dataset not found.")
}
# Filter the dataset for the given country
factors <- transport_emission_factors %>% filter(Country == country)
# If no match, return NA values
if (nrow(factors) == 0) {
return(list(
"Gasoline Vehicles" = NA,
"Diesel Vehicles" = NA,
"Electric Vehicles" = NA,
"Hybrid Vehicles" = NA,
"Natural Gas Vehicles" = NA,
"Public Transport" = NA,
"Flights" = NA,
"Long Distance Train" = NA
))
}
# Convert row data to a list (excluding country column)
return(as.list(factors[-1]))
}
#' Calculate Transport-Related Carbon Emissions with Process Data
#'
#' This function computes transport-related carbon emissions and retains process calculation result data.
#'
#' @param df A data frame containing transportation-related survey data.
#' @return A data frame with a new column `TransportEmissions` representing total transport emissions and additional process calculation results.
#' @export
calc_transport_emissions_process <- function(df) {
# Get country-specific transport emission factors
emission_factors_transport <- get_transport_emission_factors(unique(df$SD_07_Country))
# Ensure emission factors are not NULL or empty
emission_factors_transport <- lapply(emission_factors_transport, function(x) ifelse(is.na(x) | length(x) == 0, 0, x))
# Define mappings for categorical values
car_usage_map <- c(
"0 days (I do not use a car)" = 0,
"1-2 days" = 1.5,
"3-4 days" = 3.5,
"5-6 days" = 5.5,
"Everyday" = 7
)
car_distance_map <- c(
"0-5 km or 0-3.1 miles" = 5,
"5-10 km or 3.1-6.2 miles" = 10,
"11-50 km or 6.2-31 miles" = 30.5,
"More than 50 km or 31 miles" = 51
)
public_transport_freq_map <- c(
"Daily" = 1,
"Weekly" = 1/7,
"Monthly" = 1/30,
"Rarely" = 1/90,
"Never" = 0
)
public_transport_distance_map <- c(
"0-5 km or 0-3.1 miles" = 5,
"5-10 km or 3.1-6.2 miles" = 10,
"11-50 km or 6.2-31 miles" = 30.5,
"More than 50 km or 31 miles" = 51
)
flight_freq_map <- c(
"None" = 0,
"1-3 flights" = 2.5,
"4-6 flights" = 5,
"7-10 flights" = 8,
"More than 10 flights" = 12
)
long_distance_transport_map <- c(
"Daily" = 1,
"Weekly" = 1/7,
"Monthly" = 1/30,
"Rarely" = 1/90,
"Never" = 0
)
# Map categorical values to numeric
df <- df %>%
mutate(
T_01_CarUsage = car_usage_map[T_01_CarUsage],
T_03_CarDistance = car_distance_map[T_03_CarDistance],
T_04_PublicTransport_usage = sapply(T_04_PublicTransport, function(x) public_transport_freq_map[[x]]),
T_05_PublicTransport = public_transport_distance_map[T_05_PublicTransport],
T_06_AirTravelLong = flight_freq_map[T_06_AirTravelLong],
T_07_AirTravelShort = flight_freq_map[T_07_AirTravelShort],
T_08_LongDistanceTra = long_distance_transport_map[T_08_LongDistanceTra]
)
# Assign correct emission factors for car types
df <- df %>%
mutate(
car_emission_factor = case_when(
T_02_CarType == "Gasoline Vehicle" ~ emission_factors_transport$Gasoline_Vehicles,
T_02_CarType == "Diesel Vehicle" ~ emission_factors_transport$Diesel_Vehicles,
T_02_CarType == "Hybrid Vehicle" ~ emission_factors_transport$Hybrid_Vehicles,
T_02_CarType == "Electric Vehicle" ~ emission_factors_transport$Electric_Vehicles,
T_02_CarType == "Natural Gas Vehicle" ~ emission_factors_transport$Natural_Gas_Vehicles,
TRUE ~ 0
)
)
# Handle missing values in user inputs
df <- df %>%
mutate(
T_01_CarUsage = ifelse(is.na(T_01_CarUsage), 0, T_01_CarUsage),
T_03_CarDistance = ifelse(is.na(T_03_CarDistance), 0, T_03_CarDistance),
T_04_PublicTransport_usage = ifelse(is.na(T_04_PublicTransport_usage), 0, T_04_PublicTransport_usage),
T_05_PublicTransport = ifelse(is.na(T_05_PublicTransport), 0, T_05_PublicTransport),
T_06_AirTravelLong = ifelse(is.na(T_06_AirTravelLong), 0, T_06_AirTravelLong),
T_07_AirTravelShort = ifelse(is.na(T_07_AirTravelShort), 0, T_07_AirTravelShort),
T_08_LongDistanceTra = ifelse(is.na(T_08_LongDistanceTra), 0, T_08_LongDistanceTra)
)
# Calculate weekly travel distances
df <- df %>%
mutate(
WeeklyCarDistance = T_01_CarUsage * T_03_CarDistance,
WeeklyPublicTransportDistance = T_05_PublicTransport,
public_transport_usage_factor = T_04_PublicTransport_usage
)
df <- df %>%
mutate(WeeklyCarDistance = as.numeric(WeeklyCarDistance),
WeeklyPublicTransportDistance = as.numeric(WeeklyPublicTransportDistance))
# Ensure emission factors are correctly assigned and avoid size 0 error
public_transport_factor <- ifelse(length(emission_factors_transport$Public_Transport) > 0,
emission_factors_transport$Public_Transport, 0)
flights_factor <- ifelse(length(emission_factors_transport$Flights) > 0,
emission_factors_transport$Flights, 0)
train_factor <- ifelse(length(emission_factors_transport$Long_Distance_Train) > 0,
emission_factors_transport$Long_Distance_Train, 0)
# Calculate annual emissions
df <- df %>%
mutate(
CarEmissions = WeeklyCarDistance * car_emission_factor * 52,
PublicTransportEmissions = WeeklyPublicTransportDistance * public_transport_factor * 52 * public_transport_usage_factor,
AirTravelLongEmissions = T_06_AirTravelLong * 1609 * flights_factor,
AirTravelShortEmissions = T_07_AirTravelShort * 804.5 * flights_factor,
TrainEmissions = T_08_LongDistanceTra * 100 * 365 * train_factor,
TransportEmissions = CarEmissions + PublicTransportEmissions + AirTravelLongEmissions + AirTravelShortEmissions + TrainEmissions
)
df <- df %>%
mutate(    CarEmissions = as.numeric(CarEmissions),
PublicTransportEmissions = as.numeric(PublicTransportEmissions),
AirTravelLongEmissions = as.numeric(AirTravelLongEmissions),
AirTravelShortEmissions = as.numeric(AirTravelShortEmissions),
TrainEmissions = as.numeric(TrainEmissions),
TransportEmissions = as.numeric(TransportEmissions))
# Notify user and print results
message("New column `TransportEmissions` representing total transport-related emissions has been added to the dataset.")
message("Process calculation result data have been added.")
print(df$TransportEmissions)
return(df)
}
calc_transport_emissions_process(questionnaire_sample)
library(readxl)
questionnaire_sample <- read_excel("D:/paper/creatpackagesecfc/questionnaire_sample.xlsx")
View(questionnaire_sample)
calc_transport_emissions_process(questionnaire_sample)
transport_process <- calc_transport_emissions_process(questionnaire_sample)
View(transport_process)
transport <- calc_transport_emissions(questionnaire_sample)
View(transport)
View(transport)
remove.packages("SECFC")
remotes::install_github("jianing-d/SECFC")
library(SECFC)
library(readxl)
questionnaire_sample <- read_excel("D:/paper/creatpackagesecfc/questionnaire_sample.xlsx")
View(questionnaire_sample)
transport_process <- calc_transport_emissions_process(questionnaire_sample)
View(transport_process)
remove.packages("SECFC")
remotes::install_github("jianing-d/SECFC")
cp1 <- readRDS("C:/Users/22561/Nutstore/1/carbon footprint/cp_update/cp1.rds")
cp2 <- readRDS("C:/Users/22561/Nutstore/1/carbon footprint/cp_update/cp2.rds")
View(cp1)
# Emission coefficients from the provided data
emission_factors_food <- list(
"Meat-based meals" = 3.07,   # kg CO2 per meal
"Vegan meals" = 0.25,        # kg CO2 per meal
"Vegetarian meals" = 0.68,   # kg CO2 per meal
"Dairy Products" = 1.5423562  # kg CO2 per kg
)
# Extract relevant variables from the dataframe
meat_meals_per_week <- carbonmay24$F3_Q28_1
# Load necessary libraries
library(dplyr)
# Emission coefficients from the provided data
emission_factors_food <- list(
"Meat-based meals" = 3.07,   # kg CO2 per meal
"Vegan meals" = 0.25,        # kg CO2 per meal
"Vegetarian meals" = 0.68,   # kg CO2 per meal
"Dairy Products" = 1.5423562  # kg CO2 per kg
)
# Extract relevant variables from the dataframe
meat_meals_per_week <- cp1$F3_Q28_1
vegan_meals_per_week <- cp1$F3_Q28_2
vegetarian_meals_per_week <- cp1$F3_Q28_3
dairy_products_per_week <- cp1$F3_Q28_4
# Calculate annual emissions from food consumption
meat_emissions <- meat_meals_per_week * 52 * emission_factors_food[["Meat-based meals"]]
vegan_emissions <- vegan_meals_per_week * 52 * emission_factors_food[["Vegan meals"]]
vegetarian_emissions <- vegetarian_meals_per_week * 52 * emission_factors_food[["Vegetarian meals"]]
dairy_emissions <- dairy_products_per_week * 52 * emission_factors_food[["Dairy Products"]]
# Total food emissions
total_food_emissions <- meat_emissions + vegan_emissions + vegetarian_emissions + dairy_emissions
# Add the total food emissions to the dataframe
cp1$total_food_emissions <- total_food_emissions
# Print the first few rows of the dataframe with the calculated emissions
print(head(cp1))
View(cp1)
cp1_original <- readRDS("C:/Users/22561/Nutstore/1/carbon footprint/cp_update/cp1.rds")
cp2_original <- readRDS("C:/Users/22561/Nutstore/1/carbon footprint/cp_update/cp2.rds")
#-----------cp1 housing--------------
# Load necessary libraries
library(dplyr)
# Define the classify_state function
classify_state <- function(zip_code, zip_data) {
matched_state <- zip_data %>%
filter(zip_code >= `Zip Min` & zip_code <= `Zip Max`) %>%
select(ST) %>%
unique()
if (nrow(matched_state) == 1) {
return(matched_state$ST)
} else {
return(NA)  # Return NA if no match or multiple matches found
}
}
# Define the classify_zip_code function
classify_zip_code <- function(zip_code, zip_data) {
state <- classify_state(zip_code, zip_data)
# Define West and East states
west_states <- c("WA", "OR", "CA", "ID", "NV", "UT", "AZ", "MT", "WY", "CO", "NM", "HI", "AK")
east_states <- c("ME", "NH", "MA", "RI", "CT", "NY", "NJ", "DE", "MD", "VA", "NC", "SC", "GA", "FL", "VT", "PA", "WV", "OH", "MI")
if (!is.na(state)) {
if (state %in% west_states) {
return("West")
} else if (state %in% east_states) {
return("East")
} else if (state == "TX") {
return("Texas")
} else {
return("Other")
}
} else {
return("Zip code not found in dataset")
}
}
# Sample emission coefficients from previous data
emission_factors_housing <- list(
"WaterCFC" = 26.5,  # kg CO2/year
"Electricity" = list(
"Average" = 0.513,
"Texas" = 0.641855,
"Western" = 0.461226,
"Eastern" = 0.572386
),
"NaturalGas" = 0.055  # kg CO2/thousand cubic feet
)
# Define electricity prices by state (in cents per kWh)
electricity_prices <- data.frame(
state = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DC", "DE", "FL",
"GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
"MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
"NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
"SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI",
"WY"),
price = c(12.41, 22.54, 13.16, 9.99, 19.90, 12.28, 21.62, 13.21, 12.05, 11.37,
12.26, 32.76, 10.58, 12.56, 12.02, 13.81, 11.56, 10.56, 9.37, 16.16,
13.92, 21.11, 16.07, 14.09, 11.55, 13.23, 11.85, 11.31, 11.67, 19.63,
15.64, 13.37, 19.30, 11.24, 12.07, 12.64, 10.72, 11.02, 14.38, 18.64,
12.91, 12.39, 10.79, 11.36, 10.63, 18.50, 12.40, 9.79, 11.57, 14.28,
12.30)
)
# Assuming zip_data is already loaded and contains the zip code range data
# Convert zip code to numeric for comparison
cp1$US_Zip_Code <- as.numeric(cp1$US_Zip_Code)
# Calculate region and state-specific electricity emission factor
cp1 <- cp1 %>%
rowwise() %>%
mutate(
state = classify_state(US_Zip_Code, zip_data),
region = classify_zip_code(US_Zip_Code, zip_data),
electricity_emission_factor = case_when(
region == "Texas" ~ emission_factors_housing$Electricity$Texas,
region == "West" ~ emission_factors_housing$Electricity$Western,
region == "East" ~ emission_factors_housing$Electricity$Eastern,
TRUE ~ emission_factors_housing$Electricity$Average
),
electricity_price = electricity_prices$price[match(state, electricity_prices$state)]
) %>%
ungroup()
library(readr)
zip_data <- read_csv("C:/Users/22561/Nutstore/1/carbon footprint/zip_data.csv")
View(zip_data)
#-----------cp1 housing--------------
# Load necessary libraries
library(dplyr)
# Define the classify_state function
classify_state <- function(zip_code, zip_data) {
matched_state <- zip_data %>%
filter(zip_code >= `Zip Min` & zip_code <= `Zip Max`) %>%
select(ST) %>%
unique()
if (nrow(matched_state) == 1) {
return(matched_state$ST)
} else {
return(NA)  # Return NA if no match or multiple matches found
}
}
# Define the classify_zip_code function
classify_zip_code <- function(zip_code, zip_data) {
state <- classify_state(zip_code, zip_data)
# Define West and East states
west_states <- c("WA", "OR", "CA", "ID", "NV", "UT", "AZ", "MT", "WY", "CO", "NM", "HI", "AK")
east_states <- c("ME", "NH", "MA", "RI", "CT", "NY", "NJ", "DE", "MD", "VA", "NC", "SC", "GA", "FL", "VT", "PA", "WV", "OH", "MI")
if (!is.na(state)) {
if (state %in% west_states) {
return("West")
} else if (state %in% east_states) {
return("East")
} else if (state == "TX") {
return("Texas")
} else {
return("Other")
}
} else {
return("Zip code not found in dataset")
}
}
# Sample emission coefficients from previous data
emission_factors_housing <- list(
"WaterCFC" = 26.5,  # kg CO2/year
"Electricity" = list(
"Average" = 0.513,
"Texas" = 0.641855,
"Western" = 0.461226,
"Eastern" = 0.572386
),
"NaturalGas" = 0.055  # kg CO2/thousand cubic feet
)
# Define electricity prices by state (in cents per kWh)
electricity_prices <- data.frame(
state = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DC", "DE", "FL",
"GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
"MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
"NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
"SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI",
"WY"),
price = c(12.41, 22.54, 13.16, 9.99, 19.90, 12.28, 21.62, 13.21, 12.05, 11.37,
12.26, 32.76, 10.58, 12.56, 12.02, 13.81, 11.56, 10.56, 9.37, 16.16,
13.92, 21.11, 16.07, 14.09, 11.55, 13.23, 11.85, 11.31, 11.67, 19.63,
15.64, 13.37, 19.30, 11.24, 12.07, 12.64, 10.72, 11.02, 14.38, 18.64,
12.91, 12.39, 10.79, 11.36, 10.63, 18.50, 12.40, 9.79, 11.57, 14.28,
12.30)
)
# Convert zip code to numeric for comparison
cp1$US_Zip_Code <- as.numeric(cp1$US_Zip_Code)
# Calculate region and state-specific electricity emission factor
cp1 <- cp1 %>%
rowwise() %>%
mutate(
state = classify_state(US_Zip_Code, zip_data),
region = classify_zip_code(US_Zip_Code, zip_data),
electricity_emission_factor = case_when(
region == "Texas" ~ emission_factors_housing$Electricity$Texas,
region == "West" ~ emission_factors_housing$Electricity$Western,
region == "East" ~ emission_factors_housing$Electricity$Eastern,
TRUE ~ emission_factors_housing$Electricity$Average
),
electricity_price = electricity_prices$price[match(state, electricity_prices$state)]
) %>%
ungroup()
# Calculate annual emissions
cp1 <- cp1 %>%
mutate(
monthly_electricity_kWh = (E2_Electricity_bill_1 * 100) / electricity_price,
monthly_gas_cubic_feet = E3_natural_gas_bill_1 / 10,  # Assuming $10 per thousand cubic feet for simplicity
annual_electricity_emissions = monthly_electricity_kWh * 12 * electricity_emission_factor,
annual_gas_emissions = monthly_gas_cubic_feet * 12 * emission_factors_housing$NaturalGas,
annual_water_emissions = emission_factors_housing$WaterCFC,
total_housing_emissions = annual_electricity_emissions + annual_gas_emissions + annual_water_emissions
)
# Print the first few rows of the dataframe with the calculated emissions
print(head(cp1))
hc<-cp1$total_housing_emissions
fc<-cp1$total_food_emissions
cp1%>%
na.omit()%>%
mutate(total_carbon_footprint=total_housing_emissions+
total_food_emissions+total_transport_emissions)%>%
group_by(Q42)%>%
summarise(mean(total_carbon_footprint))
#-------------cp1 trans-----------
# Load necessary libraries
library(dplyr)
# Sample emission coefficients from previous data
emission_factors <- list(
"Gasoline Vehicles" = 0.19129103,  # kg CO2 per km
"Diesel Vehicles" = 0.21185669,    # kg CO2 per km
"Electric Vehicles" = 0.0,      # kg CO2 per km (assumed to be zero)
"Hybrid Vehicles" = 0.09564552,    # kg CO2 per km (assumed to be half of gasoline)
"Natural gas Vehicles" = 0.00002971,  # kg CO2 per km.  5.18 L/100 km natural gas per car, 0.573511218kg/1.0 m3 co2, 1m3=1000L,0.573511218kg/1000*5.18/100
"Public Transport" = 0.112114058,  # kg CO2 per km
"Flights" = 0.84671485,            # kg CO2 per km
"Long Distance Train" = 0.051598612  # kg CO2 per km
)
# Function to calculate weekly travel distance based on survey responses
calculate_weekly_distance <- function(days, distance_code) {
if (is.na(days) || is.na(distance_code)) return(0)
distance_values <- c(5, 10, 30.5, 51)  # Approximate midpoint values for distance ranges
distance_per_day <- distance_values[distance_code]
return(days * distance_per_day)
}
# Map car type to emission factor
map_car_type <- function(car_type_code) {
car_types <- c("Electric Vehicles", "Hybrid Vehicles", "Gasoline Vehicles", "Diesel Vehicles", "Natural gas Vehicles")
if (is.na(car_type_code)) return(NA)
return(car_types[car_type_code])
}
# Map public transport frequency to usage factor
map_public_transport_usage <- function(frequency_code) {
usage_factors <- c(1, 1/7, 1/30, 1/90, 0)  # Daily, Weekly, Monthly, Rarely, Never
if (is.na(frequency_code)) return(0)
return(usage_factors[frequency_code])
}
# Extract relevant variables from the dataframe
car_usage_days <- cp1$C1_Car_Usage
car_type_code <- cp1$C2_Car_type
travel_distance_code <- cp1$C3_Travel_Distance
public_transport_frequency <- cp1$C4_Public_Transport
public_transport_distance_code <- cp1$Q74
flight_frequency <- cp1$C5_Air_Travel
long_distance_train_frequency <- cp1$C4_Public_Transport2
# Calculate weekly distances
weekly_car_distance <- mapply(calculate_weekly_distance, car_usage_days, travel_distance_code)
# Calculate weekly distances
weekly_car_distance <- mapply(calculate_weekly_distance, car_usage_days, travel_distance_code)
str(calculate_weekly_distance, car_usage_days, travel_distance_code)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
calculate_weekly_distance
car_usage_days
calculate_weekly_distance(cp1)
#-------------cp1 trans-----------
# Load necessary libraries
library(dplyr)
# Sample emission coefficients from previous data
emission_factors <- list(
"Gasoline Vehicles" = 0.19129103,  # kg CO2 per km
"Diesel Vehicles" = 0.21185669,    # kg CO2 per km
"Electric Vehicles" = 0.0,      # kg CO2 per km (assumed to be zero)
"Hybrid Vehicles" = 0.09564552,    # kg CO2 per km (assumed to be half of gasoline)
"Natural gas Vehicles" = 0.00002971,  # kg CO2 per km.  5.18 L/100 km natural gas per car, 0.573511218kg/1.0 m3 co2, 1m3=1000L,0.573511218kg/1000*5.18/100
"Public Transport" = 0.112114058,  # kg CO2 per km
"Flights" = 0.84671485,            # kg CO2 per km
"Long Distance Train" = 0.051598612  # kg CO2 per km
)
# Function to calculate weekly travel distance based on survey responses
calculate_weekly_distance <- function(days, distance_code) {
if (is.na(days) || is.na(distance_code)) return(0)
days_values <- c(0,1.5,3.5,5.5,7)
days <- days_values[days_code]
distance_values <- c(5, 10, 30.5, 51)  # Approximate midpoint values for distance ranges
distance_per_day <- distance_values[distance_code]
return(days * distance_per_day)
}
# Map car type to emission factor
map_car_type <- function(car_type_code) {
car_types <- c("Electric Vehicles", "Hybrid Vehicles", "Gasoline Vehicles", "Diesel Vehicles", "Natural gas Vehicles")
if (is.na(car_type_code)) return(NA)
return(car_types[car_type_code])
}
# Map public transport frequency to usage factor
map_public_transport_usage <- function(frequency_code) {
usage_factors <- c(1, 1/7, 1/30, 1/90, 0)  # Daily, Weekly, Monthly, Rarely, Never
if (is.na(frequency_code)) return(0)
return(usage_factors[frequency_code])
}
# Extract relevant variables from the dataframe
days_code <- cp1$C1_Car_Usage
car_usage_days <- cp1$C1_Car_Usage
car_type_code <- cp1$C2_Car_type
travel_distance_code <- cp1$C3_Travel_Distance
public_transport_frequency <- cp1$C4_Public_Transport
public_transport_distance_code <- cp1$Q74
flight_frequency <- cp1$C5_Air_Travel
long_distance_train_frequency <- cp1$C4_Public_Transport2
# Calculate weekly distances
weekly_car_distance <- mapply(calculate_weekly_distance, car_usage_days, travel_distance_code)
weekly_public_transport_distance <- mapply(calculate_weekly_distance, public_transport_frequency, public_transport_distance_code)
# Map car type codes to emission factors
car_emission_factors <- sapply(car_type_code, function(code) {
if (is.na(code)) return(0)
return(emission_factors[[map_car_type(code)]])
})
public_transport_usage_factor <- sapply(public_transport_frequency, map_public_transport_usage)
train_usage_factor <- sapply(long_distance_train_frequency, map_public_transport_usage)
# Calculate emissions
car_emissions <- weekly_car_distance * car_emission_factors * 52
public_transport_emissions <- weekly_public_transport_distance * emission_factors[["Public Transport"]] * 52 * public_transport_usage_factor
flight_emissions <- ifelse(is.na(flight_frequency), 0, flight_frequency * 500 * emission_factors[["Flights"]])  # Assuming 1000 km per flight
# from within your package directory
pkgdown::build_site()
setwd("C:/Users/22561/Nutstore/1/GitHub/buildsecfc/SECFC")
# from within your package directory
pkgdown::build_site()
pkgdown::build_site()
git add source-files/image0503.png
