#' Get country-specific transport emission factors
#'
#' Returns a list of transport emission factors based on the country.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr %>%
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#'
#' @param country A character string representing the country.
#' @return A list of transport emission factors.
get_transport_emission_factors <- function(country) {
# Ensure the built-in dataset exists
if (!exists("transport_emission_factors")) {
stop("Error: transport_emission_factors dataset not found.")
}
# Filter the dataset for the given country
factors <- transport_emission_factors %>% filter(Country == country)
# If no match, return NA values
if (nrow(factors) == 0) {
return(list(
"Gasoline Vehicle" = NA,
"Diesel Vehicle" = NA,
"Electric Vehicle" = NA,
"Hybrid Vehicle" = NA,
"Natural Gas Vehicle" = NA,
"Public Transport" = NA,
"Flights" = NA,
"Long Distance Train" = NA
))
}
# Convert row data to a list (excluding country column)
return(as.list(factors[-1]))
}
#' Calculate Transport-Related Carbon Emissions with Process Data
#'
#' Computes transport-related carbon emissions and retains intermediate calculations.
#'
#' @param df A data frame containing transportation-related survey data.
#' @return A data frame with a new column `TransportEmissions` representing total
#'   transport emissions and additional process-calculation columns.
#' @export
calc_transport_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_transport_process")
# Get country-specific transport emission factors
emission_factors_transport <- get_transport_emission_factors(unique(df$SD_07_Country))
# Ensure emission factors are not NULL or empty
emission_factors_transport <- lapply(emission_factors_transport, function(x) ifelse(is.na(x) | length(x) == 0, 0, x))
# Define mappings for categorical values
car_usage_map <- c(
"0 days (I do not use a car)" = 0,
"1-2 days" = 1.5,
"3-4 days" = 3.5,
"5-6 days" = 5.5,
"Everyday" = 7
)
car_distance_map <- c(
"0-5 km or 0-3.1 miles" = 5,
"5-10 km or 3.1-6.2 miles" = 10,
"11-50 km or 6.2-31 miles" = 30.5,
"More than 50 km or 31 miles" = 51
)
public_transport_freq_map <- c(
"Daily" = 1,
"Weekly" = 1/7,
"Monthly" = 1/30,
"Rarely" = 1/90,
"Never" = 0
)
public_transport_distance_map <- c(
"0-5 km or 0-3.1 miles" = 5,
"5-10 km or 3.1-6.2 miles" = 10,
"11-50 km or 6.2-31 miles" = 30.5,
"More than 50 km or 31 miles" = 51
)
flight_freq_map <- c(
"None" = 0,
"1-3 flights" = 2.5,
"4-6 flights" = 5,
"7-10 flights" = 8,
"More than 10 flights" = 12
)
long_distance_transport_map <- c(
"Daily" = 1,
"Weekly" = 1/7,
"Monthly" = 1/30,
"Rarely" = 1/90,
"Never" = 0
)
# Map categorical values to numeric
df_transport_process <- df %>%
mutate(
T_01_CarUsage = car_usage_map[T_01_CarUsage],
T_03_CarDistance = car_distance_map[T_03_CarDistance],
T_04_PublicTransport_usage = sapply(T_04_PublicTransport, function(x) public_transport_freq_map[[x]]),
T_05_PublicTransport = public_transport_distance_map[T_05_PublicTransport],
T_06_AirTravelLong = flight_freq_map[T_06_AirTravelLong],
T_07_AirTravelShort = flight_freq_map[T_07_AirTravelShort],
T_08_LongDistanceTra = long_distance_transport_map[T_08_LongDistanceTra]
)
# Assign correct emission factors for car types
df_transport_process <- df_transport_process %>%
mutate(
car_emission_factor = case_when(
T_02_CarType == "Gasoline Vehicle" ~ emission_factors_transport$Gasoline_Vehicle,
T_02_CarType == "Diesel Vehicle" ~ emission_factors_transport$Diesel_Vehicle,
T_02_CarType == "Hybrid Vehicle" ~ emission_factors_transport$Hybrid_Vehicle,
T_02_CarType == "Electric Vehicle" ~ emission_factors_transport$Electric_Vehicle,
T_02_CarType == "Natural Gas Vehicle" ~ emission_factors_transport$Natural_Gas_Vehicle,
TRUE ~ 0
)
)
# Handle missing values in user inputs
df_transport_process <- df_transport_process %>%
mutate(
T_01_CarUsage = ifelse(is.na(T_01_CarUsage), 0, T_01_CarUsage),
T_03_CarDistance = ifelse(is.na(T_03_CarDistance), 0, T_03_CarDistance),
T_04_PublicTransport_usage = ifelse(is.na(T_04_PublicTransport_usage), 0, T_04_PublicTransport_usage),
T_05_PublicTransport = ifelse(is.na(T_05_PublicTransport), 0, T_05_PublicTransport),
T_06_AirTravelLong = ifelse(is.na(T_06_AirTravelLong), 0, T_06_AirTravelLong),
T_07_AirTravelShort = ifelse(is.na(T_07_AirTravelShort), 0, T_07_AirTravelShort),
T_08_LongDistanceTra = ifelse(is.na(T_08_LongDistanceTra), 0, T_08_LongDistanceTra)
)
# Calculate weekly travel distances
df_transport_process <- df_transport_process %>%
mutate(
WeeklyCarDistance = T_01_CarUsage * T_03_CarDistance,
PublicTransportDistance = T_05_PublicTransport,
public_transport_usage_factor = T_04_PublicTransport_usage
)
df_transport_process <- df_transport_process %>%
mutate(WeeklyCarDistance = as.numeric(WeeklyCarDistance),
PublicTransportDistance = as.numeric(PublicTransportDistance))
# Ensure emission factors are correctly assigned and avoid size 0 error
public_transport_factor <- ifelse(length(emission_factors_transport$Public_Transport) > 0,
emission_factors_transport$Public_Transport, 0)
flights_factor <- ifelse(length(emission_factors_transport$Flights) > 0,
emission_factors_transport$Flights, 0)
train_factor <- ifelse(length(emission_factors_transport$Long_Distance_Train) > 0,
emission_factors_transport$Long_Distance_Train, 0)
# Calculate annual emissions
df_transport_process <- df_transport_process %>%
mutate(
CarEmissions = WeeklyCarDistance * car_emission_factor * 52,
PublicTransportEmissions = PublicTransportDistance * public_transport_factor * 365 * public_transport_usage_factor,
AirTravelLongEmissions = T_06_AirTravelLong * 1609 * flights_factor,
AirTravelShortEmissions = T_07_AirTravelShort * 804.5 * flights_factor,
TrainEmissions = T_08_LongDistanceTra * 100 * 365 * train_factor,
TransportEmissions = CarEmissions + PublicTransportEmissions + AirTravelLongEmissions + AirTravelShortEmissions + TrainEmissions
)
df_transport_process <- df_transport_process %>%
mutate(    CarEmissions = as.numeric(CarEmissions),
PublicTransportEmissions = as.numeric(PublicTransportEmissions),
AirTravelLongEmissions = as.numeric(AirTravelLongEmissions),
AirTravelShortEmissions = as.numeric(AirTravelShortEmissions),
TrainEmissions = as.numeric(TrainEmissions),
TransportEmissions = as.numeric(TransportEmissions))
# assign new df_transport_process to the user’s workspace
assign(new_name, df_transport_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_transport_process)
}
#' Get country-specific pet emission factors
#'
#' Returns a list of pet emission factors based on the country.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A list of pet emission factors.
get_pet_emission_factors <- function(country) {
# Ensure dataset exists
if (!exists("pet_emission_factors")) stop("Error: pet_emission_factors dataset not found.")
# Filter dataset for the given country
factors <- pet_emission_factors %>% filter(Country == country)
# If no match, return NA values
if (nrow(factors) == 0) {
return(list("Dog" = NA, "Cat" = NA))
}
# Return as a list
return(list("Dog" = factors$Dog, "Cat" = factors$Cat))
}
#' Calculate Pet-Related Carbon Emissions with Process Data
#'
#' This function computes pet-related carbon emissions and retains process calculation result data.
#'
#' @param df A data frame containing pet ownership data.
#' @return A data frame with a new column `PetEmissions` representing total pet-related emissions and additional process calculation results.
#' @export
calc_pet_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_pet_process")
# Get country-specific pet emission factors
emission_factors_pets <- get_pet_emission_factors(unique(df$SD_07_Country))
# Convert pet ownership columns to numeric and handle missing values
df_pet_process <- df %>%
mutate(
PETS_4 = as.numeric(PETS_4),
PETS_5 = as.numeric(PETS_5),
PETS_4 = replace_na(PETS_4, 0),
PETS_5 = replace_na(PETS_5, 0)
)
# Calculate pet emissions
df_pet_process <- df_pet_process %>%
mutate(
PetEmissions_Cat = PETS_4 * emission_factors_pets$Cat,
PetEmissions_Dog = PETS_5 * emission_factors_pets$Dog,
PetEmissions = PetEmissions_Cat + PetEmissions_Dog
)
# assign new df_pet_process to the user’s workspace
assign(new_name, df_pet_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_pet_process)
}
library(dplyr)
library(tidyverse)
#' Get country-specific food emission factors from the built-in dataset
#'
#' Fetches food emission factors from the dataset stored in the package.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A named list of food emission factors.
get_food_emission_factors <- function(country) {
# Filter the dataset for the given country
factors <- food_emission_factors %>%
filter(Country == country) %>%
select(FactorName, Value)
# Convert the dataset into a named list
if (nrow(factors) > 0) {
emission_list <- setNames(factors$Value, factors$FactorName)
} else {
# Return NA for all factors if the country is not found
emission_list <- list(
"MeatMeals" = NA,
"VeganMeals" = NA,
"VegetarianMeals" = NA,
"DairyProducts" = NA
)
}
return(emission_list)
}
#' Calculate Food-Related Carbon Emissions with Process Data
#'
#' This function computes food-based emissions and retains process calculation result data.
#'
#' @param df A data frame containing the food consumption data.
#' @return A data frame with a new column `FoodEmissions` representing total food-related emissions and additional process calculation results.
#' @export
calc_food_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_food_process")
# Get country-specific food emission factors from the dataset
emission_factors_food <- get_food_emission_factors(unique(df$SD_07_Country))
# Convert food intake columns to numeric and replace NA values with 0
df_food_process <- df %>%
mutate(
F_01_DietaryHabits_5 = as.numeric(F_01_DietaryHabits_5),
F_01_DietaryHabits_6 = as.numeric(F_01_DietaryHabits_6),
F_01_DietaryHabits_7 = as.numeric(F_01_DietaryHabits_7),
F_01_DietaryHabits_4 = as.numeric(F_01_DietaryHabits_4)
) %>%
replace(is.na(.), 0)
# Calculate emissions for each food category
df_food_process <- df_food_process %>%
mutate(
MeatEmissions = F_01_DietaryHabits_5 * 52 * emission_factors_food[["MeatMeals"]],
VeganEmissions = F_01_DietaryHabits_6 * 52 * emission_factors_food[["VeganMeals"]],
VegetarianEmissions = F_01_DietaryHabits_7 * 52 * emission_factors_food[["VegetarianMeals"]],
DairyEmissions = F_01_DietaryHabits_4 * 52 * emission_factors_food[["DairyProducts"]],
# Total food emissions
FoodEmissions = rowSums(cbind(MeatEmissions, VeganEmissions, VegetarianEmissions, DairyEmissions), na.rm = TRUE)
)
# assign new df_food_process to the user’s workspace
assign(new_name, df_food_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_food_process)
}
library(dplyr)
library(tidyverse)
#' Get country-specific emission factors from the built-in dataset
#'
#' Fetches consumption emission factors from the dataset stored in the package.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A named list of consumption emission factors.
get_cons_emission_factors <- function(country) {
# Filter the dataset for the given country
factors <- cons_emission_factors %>%
filter(Country == country) %>%
select(FactorName, Value)
# Convert the dataset into a named list
if (nrow(factors) > 0) {
emission_list <- setNames(factors$Value, factors$FactorName)
} else {
# Return NA for all factors if the country is not found
emission_list <- list(
"FoodDelivery" = NA,
"DiningOut" = NA,
"HotelStays" = NA,
"TobaccoProducts" = NA,
"AlcoholDrinks" = NA,
"Entertainment" = NA,
"Healthcare" = NA,
"Clothing" = NA
)
}
return(emission_list)
}
#' Calculate Consumption-Based Emissions with Process Data
#'
#' This function computes consumption-based emissions and retains process calculation result data.
#'
#' @param df A data frame containing the consumption data.
#' @return A data frame with a new column `ConsEmissions` representing total consumption emissions and additional process calculation results.
#' @export
calc_cons_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_cons_process")
# Get country-specific emission factors from the dataset
emission_factors_cons <- get_cons_emission_factors(unique(df$SD_07_Country))
# Ensure expenditure columns are numeric
df_cons_process <- df %>%
mutate(
CL_03_MonthlyEx_9 = as.numeric(CL_03_MonthlyEx_9),
CL_03_MonthlyEx_10 = as.numeric(CL_03_MonthlyEx_10),
CL_03_MonthlyEx_11 = as.numeric(CL_03_MonthlyEx_11),
CL_03_MonthlyEx_12 = as.numeric(CL_03_MonthlyEx_12),
CL_03_MonthlyEx_13 = as.numeric(CL_03_MonthlyEx_13),
CL_03_MonthlyEx_14 = as.numeric(CL_03_MonthlyEx_14),
CL_03_MonthlyEx_15 = as.numeric(CL_03_MonthlyEx_15)
)
# Assign estimated clothing spending based on categorical responses
clothing_spending_map <- c(
"More than 12 times (At least once a month)" = 600,
"7-12 times (About every 1-2 months)" = 420,
"4-6 times (About every 2-3 months)" = 300,
"1-3 times (Less than every 3 months)" = 120,
"Rarely" = 60
)
df_cons_process <- df_cons_process %>%
mutate(
annual_clothing_spending = clothing_spending_map[CL_01_ClothingPurcha],
annual_clothing_spending = ifelse(is.na(annual_clothing_spending), 0, annual_clothing_spending),
ClothingEm = annual_clothing_spending * emission_factors_cons[["Clothing"]]
)
# Calculate annual emissions for each category
df_cons_process <- df_cons_process %>%
mutate(
FoodDeliveryEm = CL_03_MonthlyEx_9 * 12 * emission_factors_cons[["FoodDelivery"]],
DiningOutEm = CL_03_MonthlyEx_10 * 12 * emission_factors_cons[["DiningOut"]],
HotelStaysEm = CL_03_MonthlyEx_11 * 12 * emission_factors_cons[["HotelStays"]],
TobaccoEm = CL_03_MonthlyEx_12 * 12 * emission_factors_cons[["TobaccoProducts"]],
AlcoholEm = CL_03_MonthlyEx_13 * 12 * emission_factors_cons[["AlcoholDrinks"]],
EntertainmentEm = CL_03_MonthlyEx_14 * 12 * emission_factors_cons[["Entertainment"]],
HealthcareEm = CL_03_MonthlyEx_15 * 12 * emission_factors_cons[["Healthcare"]]
)
# Compute total consumption emissions
df_cons_process <- df_cons_process %>%
mutate(
ConsEmissions = rowSums(cbind(
FoodDeliveryEm, DiningOutEm, HotelStaysEm,
TobaccoEm, AlcoholEm, EntertainmentEm,
HealthcareEm, ClothingEm
), na.rm = TRUE)
)
df_cons_process <- df_cons_process %>%
mutate(
annual_clothing_spending = as.numeric(annual_clothing_spending),
ClothingEm = as.numeric(ClothingEm),
ConsEmissions = as.numeric(ConsEmissions)
)
# assign new df_cons_process to the user’s workspace
assign(new_name, df_cons_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_cons_process)
}
#' Get country-specific total emission factors
#'
#' Returns a list of total emission factors based on the country.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A list of total emission factors.
get_total_emission_factors <- function(country) {
if (country == "United States") {
return(list(
"Transport" = 1,  # Placeholder (1 means no modification)
"Pet" = 1,
"Housing" = 1,
"Food" = 1,
"Consumption" = 1
))
} else if (country == "China") {
return(list(
"Transport" = NA,  # Placeholder for China
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else if (country == "European Union") {
return(list(
"Transport" = NA,  # Placeholder for EU
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else {
return(list(
"Transport" = NA,
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
}
}
#' Calculate Total Carbon Emissions with Process Data
#'
#' This function computes total carbon emissions by aggregating transportation, pet, housing (per capita), food, and consumption-based emissions.
#'
#' @param df A data frame containing emissions data from various components.
#' @return A data frame with a new column `TotalEmissions` representing total emissions and additional process calculation results.
#' @export
calc_total_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_total_process")
df_total_process <- df
df_total_process <- suppressMessages(calc_cons_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_food_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_housing_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_pet_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_transport_emissions_process(df_total_process))
# Get country-specific emission factors
emission_factors_total <- get_total_emission_factors(unique(df_total_process$SD_07_Country))
# Ensure all emission components exist and replace NA values
df_total_process <- df_total_process %>%
mutate(
TransportEmissions = ifelse(is.na(TransportEmissions), 0, TransportEmissions) * emission_factors_total$Transport,
PetEmissions = ifelse(is.na(PetEmissions), 0, PetEmissions) * emission_factors_total$Pet,
HousingEmissions = ifelse(is.na(HousingEmissions), 0, HousingEmissions) * emission_factors_total$Housing,
FoodEmissions = ifelse(is.na(FoodEmissions), 0, FoodEmissions) * emission_factors_total$Food,
ConsEmissions = ifelse(is.na(ConsEmissions), 0, ConsEmissions) * emission_factors_total$Consumption
)
# Calculate total emissions
df_total_process <- df_total_process %>%
mutate(
TotalEmissions = TransportEmissions + PetEmissions + HousingEmissions +
FoodEmissions + ConsEmissions
)
df_total_process <- df_total_process %>%
mutate(
TotalEmissions = as.numeric(TotalEmissions)
)
# assign new df_total_process to the user’s workspace
assign(new_name, df_total_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_total_process)
}
calc_total_emissions_process(questionnaire_example)
devtools::document()
devtools::document()
