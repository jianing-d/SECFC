VegetarianEmissions = F_01_DietaryHabits_7 * 52 * emission_factors_food[["VegetarianMeals"]],
DairyEmissions = F_01_DietaryHabits_4 * 52 * emission_factors_food[["DairyProducts"]],
# Total food emissions
FoodEmissions = rowSums(cbind(MeatEmissions, VeganEmissions, VegetarianEmissions, DairyEmissions), na.rm = TRUE)
)
# assign new df_food_process to the user’s workspace
assign(new_name, df_food_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_food_process)
}
library(dplyr)
library(tidyverse)
#' Get country-specific emission factors from the built-in dataset
#'
#' Fetches consumption emission factors from the dataset stored in the package.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A named list of consumption emission factors.
get_cons_emission_factors <- function(country) {
# Filter the dataset for the given country
factors <- cons_emission_factors %>%
filter(Country == country) %>%
select(FactorName, Value)
# Convert the dataset into a named list
if (nrow(factors) > 0) {
emission_list <- setNames(factors$Value, factors$FactorName)
} else {
# Return NA for all factors if the country is not found
emission_list <- list(
"FoodDelivery" = NA,
"DiningOut" = NA,
"HotelStays" = NA,
"TobaccoProducts" = NA,
"AlcoholDrinks" = NA,
"Entertainment" = NA,
"Healthcare" = NA,
"Clothing" = NA
)
}
return(emission_list)
}
#' Calculate Consumption-Based Emissions with Process Data
#'
#' This function computes consumption-based emissions and retains process calculation result data.
#'
#' @param df A data frame containing the consumption data.
#' @return A data frame with a new column `ConsEmissions` representing total consumption emissions and additional process calculation results.
#' @export
calc_cons_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_cons_process")
# Get country-specific emission factors from the dataset
emission_factors_cons <- get_cons_emission_factors(unique(df$SD_07_Country))
# Ensure expenditure columns are numeric
df_cons_process <- df %>%
mutate(
CL_03_MonthlyEx_9 = as.numeric(CL_03_MonthlyEx_9),
CL_03_MonthlyEx_10 = as.numeric(CL_03_MonthlyEx_10),
CL_03_MonthlyEx_11 = as.numeric(CL_03_MonthlyEx_11),
CL_03_MonthlyEx_12 = as.numeric(CL_03_MonthlyEx_12),
CL_03_MonthlyEx_13 = as.numeric(CL_03_MonthlyEx_13),
CL_03_MonthlyEx_14 = as.numeric(CL_03_MonthlyEx_14),
CL_03_MonthlyEx_15 = as.numeric(CL_03_MonthlyEx_15)
)
# Assign estimated clothing spending based on categorical responses
clothing_spending_map <- c(
"More than 12 times (At least once a month)" = 600,
"7-12 times (About every 1-2 months)" = 420,
"4-6 times (About every 2-3 months)" = 300,
"1-3 times (Less than every 3 months)" = 120,
"Rarely" = 60
)
df_cons_process <- df_cons_process %>%
mutate(
annual_clothing_spending = clothing_spending_map[CL_01_ClothingPurcha],
annual_clothing_spending = ifelse(is.na(annual_clothing_spending), 0, annual_clothing_spending),
ClothingEm = annual_clothing_spending * emission_factors_cons[["Clothing"]]
)
# Calculate annual emissions for each category
df_cons_process <- df_cons_process %>%
mutate(
FoodDeliveryEm = CL_03_MonthlyEx_9 * 12 * emission_factors_cons[["FoodDelivery"]],
DiningOutEm = CL_03_MonthlyEx_10 * 12 * emission_factors_cons[["DiningOut"]],
HotelStaysEm = CL_03_MonthlyEx_11 * 12 * emission_factors_cons[["HotelStays"]],
TobaccoEm = CL_03_MonthlyEx_12 * 12 * emission_factors_cons[["TobaccoProducts"]],
AlcoholEm = CL_03_MonthlyEx_13 * 12 * emission_factors_cons[["AlcoholDrinks"]],
EntertainmentEm = CL_03_MonthlyEx_14 * 12 * emission_factors_cons[["Entertainment"]],
HealthcareEm = CL_03_MonthlyEx_15 * 12 * emission_factors_cons[["Healthcare"]]
)
# Compute total consumption emissions
df_cons_process <- df_cons_process %>%
mutate(
ConsEmissions = rowSums(cbind(
FoodDeliveryEm, DiningOutEm, HotelStaysEm,
TobaccoEm, AlcoholEm, EntertainmentEm,
HealthcareEm, ClothingEm
), na.rm = TRUE)
)
df_cons_process <- df_cons_process %>%
mutate(
annual_clothing_spending = as.numeric(annual_clothing_spending),
ClothingEm = as.numeric(ClothingEm),
ConsEmissions = as.numeric(ConsEmissions)
)
# assign new df_cons_process to the user’s workspace
assign(new_name, df_cons_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_cons_process)
}
#' Get country-specific total emission factors
#'
#' Returns a list of total emission factors based on the country.
#'
#' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#' @importFrom tidyr replace_na
#' @importFrom stats setNames
#' @importFrom magrittr "%>%"
#' @importFrom purrr map map_df
#' @importFrom tibble tibble
#' @param country A character string representing the country.
#' @return A list of total emission factors.
get_total_emission_factors <- function(country) {
if (country == "United States") {
return(list(
"Transport" = 1,  # Placeholder (1 means no modification)
"Pet" = 1,
"Housing" = 1,
"Food" = 1,
"Consumption" = 1
))
} else if (country == "China") {
return(list(
"Transport" = NA,  # Placeholder for China
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else if (country == "European Union") {
return(list(
"Transport" = NA,  # Placeholder for EU
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else {
return(list(
"Transport" = NA,
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
}
}
#' Calculate Total Carbon Emissions with Process Data
#'
#' This function computes total carbon emissions by aggregating transportation, pet, housing (per capita), food, and consumption-based emissions.
#'
#' @param df A data frame containing emissions data from various components.
#' @return A data frame with a new column `TotalEmissions` representing total emissions and additional process calculation results.
#' @export
calc_total_emissions_process <- function(df) {
original_name <- deparse(substitute(df))
new_name      <- paste0(original_name, "_total_process")
df_total_process <- df
df_total_process <- suppressMessages(calc_cons_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_food_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_housing_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_pet_emissions_process(df_total_process))
df_total_process <- suppressMessages(calc_transport_emissions_process(df_total_process))
# Get country-specific emission factors
emission_factors_total <- get_total_emission_factors(unique(df_total_process$SD_07_Country))
# Ensure all emission components exist and replace NA values
df_total_process <- df_total_process %>%
mutate(
TransportEmissions = ifelse(is.na(TransportEmissions), 0, TransportEmissions) * emission_factors_total$Transport,
PetEmissions = ifelse(is.na(PetEmissions), 0, PetEmissions) * emission_factors_total$Pet,
HousingEmissions = ifelse(is.na(HousingEmissions), 0, HousingEmissions) * emission_factors_total$Housing,
FoodEmissions = ifelse(is.na(FoodEmissions), 0, FoodEmissions) * emission_factors_total$Food,
ConsEmissions = ifelse(is.na(ConsEmissions), 0, ConsEmissions) * emission_factors_total$Consumption
)
# Calculate total emissions
df_total_process <- df_total_process %>%
mutate(
TotalEmissions = TransportEmissions + PetEmissions + HousingEmissions +
FoodEmissions + ConsEmissions
)
df_total_process <- df_total_process %>%
mutate(
TotalEmissions = as.numeric(TotalEmissions)
)
# assign new df_total_process to the user’s workspace
assign(new_name, df_total_process, envir = parent.frame())
message(
paste0(
"✅ A new data frame '", new_name,
"' is now available in your R environment."
)
)
return(df_total_process)
}
calc_total_emissions_process(questionnaire_example)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("SECFC")
remotes::install_github("jianing-d/SECFC")
library(SECFC)
cp2_clean_v0513 <- readRDS("~/Documents/paper/carbon footprint/cp_update/cp2_clean_v0513.rds")
setwd("~/Documents/paper/carbon footprint/SECFC_submission_20250522")
saveRDS(cp2_clean_v0513,"cp2_clean_v0513.rds")
calc_total_emissions_process(cp2_clean_v0513)
library(dplyr)
library(tidyr)
library(ggplot2)
#绘制分布图
# 1. Pivot to long form
emissions_long <- cp2_clean_v0513_total_process %>%
select(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions) %>%
pivot_longer(cols = everything(),
names_to  = "EmissionType",
values_to = "Value")
# 2. Plot with facets
distribution <- ggplot(emissions_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
facet_wrap(~ EmissionType, scales = "free") +
labs(
x = "Emissions (kg CO₂-eq)",
y = "Count",
title = "Distribution of Emission Components"
) +
theme_minimal()
ggsave("distribution.png",distribution)
#计算平均值
library(dplyr)
library(tidyr)
mean_table <- cp2_clean_v0513_total_process %>%
summarise(across(
c(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions),
~ mean(.x, na.rm = TRUE)
)) %>%
pivot_longer(
cols      = everything(),
names_to  = "EmissionType",
values_to = "MeanEmissions"
)
mean_table
#winsor缩尾
library(dplyr)
cp2_wins_manual <- cp2_clean_v0513_total_process %>%
mutate(across(
c(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions),
~ {
q <- quantile(.x, c(0.01, 0.99), na.rm = TRUE)
pmin(pmax(.x, q[1]), q[2])
}
))
#绘制分布图——winsor
# 1. Pivot to long form
cp2_wins_manual_long <- cp2_wins_manual %>%
select(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions) %>%
pivot_longer(cols = everything(),
names_to  = "EmissionType",
values_to = "Value")
# 2. Plot with facets
distribution <- ggplot(cp2_wins_manual_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
facet_wrap(~ EmissionType, scales = "free") +
labs(
x = "Emissions (kg CO₂-eq)",
y = "Count",
title = "Distribution of Emission Components(winsor)"
) +
theme_minimal()
distribution
#计算平均值
library(dplyr)
library(tidyr)
cp2_wins_manual_mean_table <- cp2_wins_manual %>%
summarise(across(
c(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions),
~ mean(.x, na.rm = TRUE)
)) %>%
pivot_longer(
cols      = everything(),
names_to  = "EmissionType",
values_to = "MeanEmissions"
)
cp2_wins_manual_mean_table
#绘制各类条形图
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
# 1. Define groups
cons_vars      <- c("FoodDeliveryEm","DiningOutEm","HotelStaysEm",
"TobaccoEm","AlcoholEm","EntertainmentEm",
"HealthcareEm","ClothingEm")
food_vars      <- c("MeatEmissions","VeganEmissions",
"VegetarianEmissions","DairyEmissions")
housing_vars   <- c("ElectricityEmissions","NaturalGasEmissions","WaterEmissions")
pet_vars       <- c("PetEmissions_Cat","PetEmissions_Dog")
transport_vars <- c("CarEmissions","PublicTransportEmissions",
"AirTravelLongEmissions","AirTravelShortEmissions","TrainEmissions")
# 2. Lookup table for Category labels
var_lookup <- tibble(
emission = c(cons_vars, food_vars, housing_vars, pet_vars, transport_vars),
Category = rep(c("Consumption","Food","Housing","Pet","Transport"),
times = c(length(cons_vars),
length(food_vars),
length(housing_vars),
length(pet_vars),
length(transport_vars)))
)
# 3. Compute means & pivot
mean_df <- cp2_clean_v0513_total_process %>%
select(all_of(var_lookup$emission)) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE))) %>%
pivot_longer(everything(), names_to="emission", values_to="mean_value") %>%
left_join(var_lookup, by="emission")
# 4. Plot with truly free scales per facet
bar_plot <- ggplot(mean_df,
aes(x = mean_value,
y = fct_reorder(emission, mean_value))) +
geom_col(fill = "steelblue") +
facet_wrap(~ Category, scales = "free") +       # <— free x & y
scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_y_discrete(expand = expansion(add = c(0, 0))) +
labs(
x     = "Mean Emissions (kg CO₂-eq)",
y     = NULL,
title = "Average Emissions by Category"
) +
theme_minimal() +
theme(
strip.text        = element_text(face = "bold", size = 12),
axis.text.y       = element_text(size = 8),
panel.spacing     = unit(1, "lines"),         # more space between facets
plot.title        = element_text(face = "bold", hjust = 0.5)
)
bar_plot
ggsave("bar_plot.png",bar_plot,width =12 ,height =7 )
#calculate the mean of car distance
cp2_clean_v0513_total_process %>%
summarise(mean_distance_car=mean(T_03_CarDistance))
cp2_clean_v0513_total_process %>%
summarise(mean_distance_car=mean(WeeklyCarDistance))
#using the data after winsor
#绘制各类条形图
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
# 1. Define groups
cons_vars      <- c("FoodDeliveryEm","DiningOutEm","HotelStaysEm",
"TobaccoEm","AlcoholEm","EntertainmentEm",
"HealthcareEm","ClothingEm")
food_vars      <- c("MeatEmissions","VeganEmissions",
"VegetarianEmissions","DairyEmissions")
housing_vars   <- c("ElectricityEmissions","NaturalGasEmissions","WaterEmissions")
pet_vars       <- c("PetEmissions_Cat","PetEmissions_Dog")
transport_vars <- c("CarEmissions","PublicTransportEmissions",
"AirTravelLongEmissions","AirTravelShortEmissions","TrainEmissions")
# 2. Lookup table for Category labels
var_lookup <- tibble(
emission = c(cons_vars, food_vars, housing_vars, pet_vars, transport_vars),
Category = rep(c("Consumption","Food","Housing","Pet","Transport"),
times = c(length(cons_vars),
length(food_vars),
length(housing_vars),
length(pet_vars),
length(transport_vars)))
)
# 3. Compute means & pivot
cp2_wins_manual_mean_df <- cp2_wins_manual %>%
select(all_of(var_lookup$emission)) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE))) %>%
pivot_longer(everything(), names_to="emission", values_to="mean_value") %>%
left_join(var_lookup, by="emission")
# 4. Plot with truly free scales per facet
bar_plot_winsor <- ggplot(cp2_wins_manual_mean_df,
aes(x = mean_value,
y = fct_reorder(emission, mean_value))) +
geom_col(fill = "steelblue") +
facet_wrap(~ Category, scales = "free") +       # <— free x & y
scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
scale_y_discrete(expand = expansion(add = c(0, 0))) +
labs(
x     = "Mean Emissions (kg CO₂-eq)",
y     = NULL,
title = "Average Emissions by Category(winsor)"
) +
theme_minimal() +
theme(
strip.text        = element_text(face = "bold", size = 12),
axis.text.y       = element_text(size = 8),
panel.spacing     = unit(1, "lines"),         # more space between facets
plot.title        = element_text(face = "bold", hjust = 0.5)
)
bar_plot_winsor
ggsave("bar_plot_winsor.png",bar_plot,width =12 ,height =7 )
cp2_clean_v0513_total_process %>%
summarise(mean_distance_car=mean(EH_05_NaturalGasBill_1))
cp2_clean_v0513_total_process %>%
summarise(mean_distance_car=mean(EH_02_ElectricityBil_1))
mean_table <- cp2_clean_v0513_total_process %>%
summarise(across(
c(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions),
~ mean(.x, na.rm = TRUE)
)) %>%
pivot_longer(
cols      = everything(),
names_to  = "EmissionType",
values_to = "MeanEmissions"
)
mean_table
cp2_wins_manual_mean_table <- cp2_wins_manual %>%
summarise(across(
c(ConsEmissions,
FoodEmissions,
HousingEmissions,
PetEmissions,
TransportEmissions,
TotalEmissions),
~ mean(.x, na.rm = TRUE)
)) %>%
pivot_longer(
cols      = everything(),
names_to  = "EmissionType",
values_to = "MeanEmissions"
)
cp2_wins_manual_mean_table
# 2. Plot with facets
distribution <- ggplot(cp2_wins_manual_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
facet_wrap(~ EmissionType, scales = "free") +
labs(
x = "Emissions (kg CO₂-eq)",
y = "Count",
title = "Distribution of Emission Components(winsor)"
) +
theme_minimal()
distribution
ggsave("distribution_winsor.png",distribution_winsor)
# 2. Plot with facets
distribution_winsor <- ggplot(cp2_wins_manual_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
facet_wrap(~ EmissionType, scales = "free") +
labs(
x = "Emissions (kg CO₂-eq)",
y = "Count",
title = "Distribution of Emission Components(winsor)"
) +
theme_minimal()
distribution_winsor
ggsave("distribution_winsor.png",distribution_winsor)
setwd("~/Nutstore Files/宁波项目/小区分层")
library(readxl)
community_match <- read_excel("社区得分+社区信息匹配表.xlsx")
View(community_match)
library(readxl)
number <- read_excel("/Volumes/Lenovo/download/number.xlsx")
View(number)
