"Daily" = 1,
"Weekly" = 1/7,
"Monthly" = 1/30,
"Rarely" = 1/90,
"Never" = 0
)
# Map categorical values to numeric
df <- df %>%
mutate(
T_01_CarUsage = car_usage_map[T_01_CarUsage],
T_03_CarDistance = car_distance_map[T_03_CarDistance],
T_04_PublicTransport = public_transport_freq_map[T_04_PublicTransport],
T_05_PublicTransport = public_transport_distance_map[T_05_PublicTransport],
T_06_AirTravelLong = flight_freq_map[T_06_AirTravelLong],
T_07_AirTravelShort = flight_freq_map[T_07_AirTravelShort],
T_08_LongDistanceTra = long_distance_transport_map[T_08_LongDistanceTra]
)
# Assign correct emission factors for car types
df <- df %>%
mutate(
car_emission_factor = case_when(
T_02_CarType == "Gasoline Vehicle" ~ emission_factors_transport$Gasoline_Vehicles,
T_02_CarType == "Diesel Vehicle" ~ emission_factors_transport$Diesel_Vehicles,
T_02_CarType == "Hybrid Vehicle" ~ emission_factors_transport$Hybrid_Vehicles,
T_02_CarType == "Electric Vehicle" ~ emission_factors_transport$Electric_Vehicles,
T_02_CarType == "Natural Gas Vehicle" ~ emission_factors_transport$Natural_Gas_Vehicles,
TRUE ~ 0
)
)
# Handle missing values in user inputs
df <- df %>%
mutate(
T_01_CarUsage = ifelse(is.na(T_01_CarUsage), 0, T_01_CarUsage),
T_03_CarDistance = ifelse(is.na(T_03_CarDistance), 0, T_03_CarDistance),
T_04_PublicTransport = ifelse(is.na(T_04_PublicTransport), 0, T_04_PublicTransport),
T_05_PublicTransport = ifelse(is.na(T_05_PublicTransport), 0, T_05_PublicTransport),
T_06_AirTravelLong = ifelse(is.na(T_06_AirTravelLong), 0, T_06_AirTravelLong),
T_07_AirTravelShort = ifelse(is.na(T_07_AirTravelShort), 0, T_07_AirTravelShort),
T_08_LongDistanceTra = ifelse(is.na(T_08_LongDistanceTra), 0, T_08_LongDistanceTra)
)
# Calculate weekly travel distances
df <- df %>%
mutate(
WeeklyCarDistance = T_01_CarUsage * T_03_CarDistance,
WeeklyPublicTransportDistance = T_04_PublicTransport * T_05_PublicTransport
)
df <- df %>%
mutate(WeeklyCarDistance = as.numeric(WeeklyCarDistance),
WeeklyPublicTransportDistance = as.numeric(WeeklyPublicTransportDistance))
# Ensure emission factors are correctly assigned and avoid size 0 error
public_transport_factor <- ifelse(length(emission_factors_transport$Public_Transport) > 0,
emission_factors_transport$Public_Transport, 0)
flights_factor <- ifelse(length(emission_factors_transport$Flights) > 0,
emission_factors_transport$Flights, 0)
train_factor <- ifelse(length(emission_factors_transport$Long_Distance_Train) > 0,
emission_factors_transport$Long_Distance_Train, 0)
# Calculate annual emissions
df <- df %>%
mutate(
CarEmissions = WeeklyCarDistance * car_emission_factor * 52,
PublicTransportEmissions = WeeklyPublicTransportDistance * public_transport_factor * 52,
AirTravelLongEmissions = T_06_AirTravelLong * 500 * flights_factor,
AirTravelShortEmissions = T_07_AirTravelShort * 500 * flights_factor,
TrainEmissions = T_08_LongDistanceTra * 100 * 365 * train_factor,
# Compute total transport emissions
TransportEmissions = CarEmissions + PublicTransportEmissions + AirTravelLongEmissions + AirTravelShortEmissions + TrainEmissions
)
df <- df %>%
mutate(    CarEmissions = as.numeric(CarEmissions),
PublicTransportEmissions = as.numeric(PublicTransportEmissions),
AirTravelLongEmissions = as.numeric(AirTravelLongEmissions),
AirTravelShortEmissions = as.numeric(AirTravelShortEmissions),
TrainEmissions = as.numeric(TrainEmissions),
TransportEmissions = as.numeric(TransportEmissions))
# Notify user and print results
message("New column `TransportEmissions` representing total transport-related emissions has been added to the dataset.")
message("Process calculation result data have been added.")
print(df$TransportEmissions)
return(df)
}
'
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'calc_transport_emissions_process.R' has been successfully created.\n")
# Write the script content into "calc_total_emissions_process.R"
file_path <- "R/calc_total_emissions_process.R"
script_content <- '
#\' Get country-specific total emission factors
#\'
#\' Returns a list of total emission factors based on the country.
#\'
#\' @importFrom dplyr filter mutate select case_when rowwise ungroup pull
#\' @importFrom tidyr replace_na
#\' @importFrom stats setNames
#\' @importFrom magrittr "%>%"
#\' @importFrom purrr map map_df
#\' @importFrom tibble tibble
#\' @param country A character string representing the country.
#\' @return A list of total emission factors.
get_total_emission_factors <- function(country) {
if (country == "United States") {
return(list(
"Transport" = 1,  # Placeholder (1 means no modification)
"Pet" = 1,
"Housing" = 1,
"Food" = 1,
"Consumption" = 1
))
} else if (country == "China") {
return(list(
"Transport" = NA,  # Placeholder for China
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else if (country == "European Union") {
return(list(
"Transport" = NA,  # Placeholder for EU
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
} else {
return(list(
"Transport" = NA,
"Pet" = NA,
"Housing" = NA,
"Food" = NA,
"Consumption" = NA
))
}
}
#\' Calculate Total Carbon Emissions with Process Data
#\'
#\' This function computes total carbon emissions by aggregating transportation, pet, housing (per capita), food, and consumption-based emissions.
#\'
#\' @param df A data frame containing emissions data from various components.
#\' @return A data frame with a new column `TotalEmissions` representing total emissions and additional process calculation results.
#\' @export
calc_total_emissions_process <- function(df) {
df <- calc_cons_emissions_process(df)
df <- calc_food_emissions_process(df)
df <- calc_housing_emissions_process(df)
df <- calc_pet_emissions_process(df)
df <- calc_transport_emissions_process(df)
# Get country-specific emission factors
emission_factors_total <- get_total_emission_factors(unique(df$SD_07_Country))
# Convert household size columns to numeric and handle NA values
df <- df %>%
mutate(
SD_06_HouseholdSize_17 = as.numeric(SD_06_HouseholdSize_17),
SD_06_HouseholdSize_18 = as.numeric(SD_06_HouseholdSize_18),
SD_06_HouseholdSize_19 = as.numeric(SD_06_HouseholdSize_19),
SD_06_HouseholdSize_17 = ifelse(is.na(SD_06_HouseholdSize_17), 0, SD_06_HouseholdSize_17),
SD_06_HouseholdSize_18 = ifelse(is.na(SD_06_HouseholdSize_18), 0, SD_06_HouseholdSize_18),
SD_06_HouseholdSize_19 = ifelse(is.na(SD_06_HouseholdSize_19), 0, SD_06_HouseholdSize_19)
)
# Calculate total household size (minimum 1 to prevent division by zero)
df <- df %>%
mutate(
HouseholdSize = SD_06_HouseholdSize_17 + SD_06_HouseholdSize_18 + SD_06_HouseholdSize_19,
HouseholdSize = ifelse(HouseholdSize == 0, 1, HouseholdSize)
)
# Adjust housing emissions per capita
df <- df %>%
mutate(
HousingEmissionsPerCapita = HousingEmissions / HouseholdSize
)
# Ensure all emission components exist and replace NA values
df <- df %>%
mutate(
TransportEmissions = ifelse(is.na(TransportEmissions), 0, TransportEmissions) * emission_factors_total$Transport,
PetEmissions = ifelse(is.na(PetEmissions), 0, PetEmissions) * emission_factors_total$Pet,
HousingEmissionsPerCapita = ifelse(is.na(HousingEmissionsPerCapita), 0, HousingEmissionsPerCapita) * emission_factors_total$Housing,
FoodEmissions = ifelse(is.na(FoodEmissions), 0, FoodEmissions) * emission_factors_total$Food,
ConsEmissions = ifelse(is.na(ConsEmissions), 0, ConsEmissions) * emission_factors_total$Consumption
)
# Calculate total emissions
df <- df %>%
mutate(
TotalEmissions = TransportEmissions + PetEmissions + HousingEmissionsPerCapita +
FoodEmissions + ConsEmissions
)
df <- df %>%
mutate(
TotalEmissions = as.numeric(TotalEmissions)
)
#Notify user and print results
message("All individual emission calculations have been completed.")
message("New column `TotalEmissions` representing total carbon footprint has been added to the dataset.")
message("Process calculation result data have been added.")
print(df$TotalEmissions)
return(df)
}
'
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'calc_total_emissions_process.R' has been successfully created.\n")
# Write the script content into "cons_emission_factors.R"
file_path <- "R/cons_emission_factors.R"
script_content <- "
#' Consumer Emission Factors Dataset
#'
#' This dataset contains emission factors for various consumer goods and services
#' based on country-specific data.
#'
#' @docType data
#' @name cons_emission_factors
#' @usage data(cons_emission_factors)
#' @keywords datasets
#' @format A data frame with columns:
#' \\describe{
#'   \\item{Country}{Country name}
#'   \\item{FactorName}{Type of consumer emission factor (e.g., Clothing, Dining, Healthcare, etc.)}
#'   \\item{Value}{Emission value for the given factor}
#' }
'cons_emission_factors'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'cons_emission_factors.R' has been successfully created.\n")
# Write the script content into "food_emission_factors.R"
file_path <- "R/food_emission_factors.R"
script_content <- "
#' Food Emission Factors Dataset
#'
#' This dataset contains food-related emission factors based on country-specific data.
#'
#' @docType data
#' @name food_emission_factors
#' @usage data(food_emission_factors)
#' @keywords datasets
#' @format A data frame with columns:
#' \\describe{
#'   \\item{Country}{Country name}
#'   \\item{FactorName}{Type of food emission factor (e.g., Dairy, Meat, Vegan, Vegetarian)}
#'   \\item{Value}{Emission value for the given factor}
#' }
'food_emission_factors'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'food_emission_factors.R' has been successfully created.\n")
# Write the script content into "housing_emission_factors.R"
file_path <- "R/housing_emission_factors.R"
script_content <- "
#' Housing Emission Factors Dataset
#'
#' This dataset contains housing-related emission factors based on country-specific data.
#'
#' @docType data
#' @name housing_emission_factors
#' @usage data(housing_emission_factors)
#' @keywords datasets
#' @format A data frame with columns:
#' \\describe{
#'   \\item{Country}{Country name}
#'   \\item{FactorName}{Type of housing emission factor (e.g., Electricity, Heating_Oil, Natural_Gas, Water)}
#'   \\item{Value}{Emission value for the given factor}
#' }
'housing_emission_factors'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'housing_emission_factors.R' has been successfully created.\n")
# Write the script content into "pet_emission_factors.R"
file_path <- "R/pet_emission_factors.R"
script_content <- "
#' Pet Emission Factors Dataset
#'
#' This dataset contains emission factors for pet ownership based on country-specific data.
#'
#' @docType data
#' @name pet_emission_factors
#' @usage data(pet_emission_factors)
#' @keywords datasets
#' @format A data frame with columns:
#' \\describe{
#'   \\item{Country}{Character, name of the country or region}
#'   \\item{Dog}{Numeric, carbon emissions from dogs (kg CO2 per year)}
#'   \\item{Cat}{Numeric, carbon emissions from cats (kg CO2 per year)}
#' }
'pet_emission_factors'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'pet_emission_factors.R' has been successfully created.\n")
# Write the script content into "transport_emission_factors.R"
file_path <- "R/transport_emission_factors.R"
script_content <- "
#' Transport Emission Factors Dataset
#'
#' This dataset contains emission factors for different modes of transport,
#' categorized by country.
#'
#' @docType data
#' @name transport_emission_factors
#' @usage data(transport_emission_factors)
#' @keywords datasets
#' @format A data frame with columns:
#' \\describe{
#'   \\item{Country}{Character, name of the country or region}
#'   \\item{Diesel_Vehicles}{Numeric, carbon emissions from diesel vehicles}
#'   \\item{Electric_Vehicles}{Numeric, carbon emissions from electric vehicles}
#'   \\item{Flights}{Numeric, emissions from air travel}
#'   \\item{Gasoline_Vehicles}{Numeric, emissions from gasoline vehicles}
#'   \\item{Hybrid_Vehicles}{Numeric, emissions from hybrid vehicles}
#'   \\item{Long_Distance_Train}{Numeric, emissions from train travel}
#'   \\item{Natural_Gas_Vehicles}{Numeric, emissions from natural gas vehicles}
#'   \\item{Public_Transport}{Numeric, emissions from public transport}
#' }
'transport_emission_factors'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'transport_emission_factors.R' has been successfully created.\n")
# Write the script content into "zip_data.R"
file_path <- "R/zip_data.R"
script_content <- "
#' ZIP Code Data for U.S. States
#'
#' This dataset provides the ZIP code ranges for different states in the United States.
#'
#' @docType data
#' @name zip_data
#' @usage data(zip_data)
#' @keywords datasets
#' @format A data frame with the following columns:
#' \\describe{
#'   \\item{ID}{Unique identifier}
#'   \\item{ST}{State abbreviation}
#'   \\item{State_Name}{Full name of the state}
#'   \\item{Zip_Max}{Maximum ZIP code in the range}
#'   \\item{Zip_Min}{Minimum ZIP code in the range}
#' }
'zip_data'
"
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'zip_data.R' has been successfully created.\n")
# Write the script content into "zzz.R"
file_path <- "R/zzz.R"
script_content <- '
.onLoad <- function(libname, pkgname) {
required_packages <- c("dplyr", "tidyr", "tibble", "purrr", "magrittr")
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(paste("Package", pkg, "is required but not installed. Please install it."))
}
}
}
.onLoad <- function(libname, pkgname) {
utils::globalVariables(c(
# General variables
"Zip_Min", "Zip_Max", "ST", "SD_08_ZipCode", "WeeklyCarDistance",
"electricity_emission_factor", "natural_gas_usage_cubic_feet",
"electricity_usage_kWh", "CarEmissions", "PublicTransportEmissions",
"AirTravelLongEmissions", "AirTravelShortEmissions", "TrainEmissions",
"PetEmissions", "PetEmissions_Cat", "PetEmissions_Dog", "HousingEmissions",
"FoodEmissions", "ConsEmissions", "WaterEmissions", "HouseholdSize",
# Consumption Emissions
"CL_03_MonthlyEx_9", "CL_03_MonthlyEx_10", "CL_03_MonthlyEx_11",
"CL_03_MonthlyEx_12", "CL_03_MonthlyEx_13", "CL_03_MonthlyEx_14",
"CL_03_MonthlyEx_15", "CL_01_ClothingPurcha", "annual_clothing_spending",
"FoodDeliveryEm", "DiningOutEm", "HotelStaysEm", "TobaccoEm",
"AlcoholEm", "EntertainmentEm", "HealthcareEm", "ClothingEm",
# Food Emissions
"F_01_DietaryHabits_4", "F_01_DietaryHabits_5", "F_01_DietaryHabits_6",
"F_01_DietaryHabits_7", ".", "MeatEmissions", "VeganEmissions",
"VegetarianEmissions", "DairyEmissions",
# Housing Emissions
"EH_02_ElectricityBil_1", "EH_03_ElectricityBil_1",
"EH_05_NaturalGasBill_1", "EH_06_NaturalGasBill_1",
"ElectricityEmissions", "NaturalGasEmissions",
# Pet Emissions
"PETS_4", "PETS_5",
# Total Emissions
"SD_06_HouseholdSize_17", "SD_06_HouseholdSize_18", "SD_06_HouseholdSize_19",
"TransportEmissions", "HousingEmissionsPerCapita","TotalEmissions",
# Transport Emissions
"T_01_CarUsage", "T_03_CarDistance", "T_04_PublicTransport",
"T_05_PublicTransport", "T_06_AirTravelLong", "T_07_AirTravelShort",
"T_08_LongDistanceTra", "car_emission_factor", "WeeklyPublicTransportDistance",
# Emission Factor Functions
"Country", "FactorName", "Value", "pull"
))
}
'
# Write the script to the R file
writeLines(script_content, file_path, useBytes = TRUE)
# Confirm file creation
cat("The file 'zzz.R' has been successfully created.\n")
devtools::document()
questionnaire_sample <- readRDS("D:/paper/creapackagesecfc/questionnaire_sample.rds")
## load all
devtools::load_all("D:/paper/creapackagesecfc/SECFC")
## Check if function exists
ls("package:SECFC")
## test
remove.packages("SECFC")
devtools::install("D:/paper/creapackagesecfc/SECFC")
devtools::check("D:/paper/creapackagesecfc/SECFC")
devtools::check("D:/paper/creapackagesecfc/SECFC")
## load all
devtools::load_all("D:/paper/creapackagesecfc/SECFC")
## Check if function exists
ls("package:SECFC")
## test
remove.packages("SECFC")
devtools::install("D:/paper/creapackagesecfc/SECFC")
devtools::check("D:/paper/creapackagesecfc/SECFC")
#use the package
library(SECFC)
#import the dataset "questionnaire_sample" by using readRDS function
questionnaire_sample <- readRDS("D:/paper/creapackagesecfc/questionnaire_sample.rds")
#change the path to your stored data
# Run all emission calculation functions sequentially
cons <- calc_cons_emissions(questionnaire_sample)
food <- calc_food_emissions(questionnaire_sample)
tran <- calc_transport_emissions(questionnaire_sample)
hous <- calc_housing_emissions(questionnaire_sample)
pets <- calc_pet_emissions(questionnaire_sample)
total <- calc_total_emissions(questionnaire_sample)
cons_process <- calc_cons_emissions_process(questionnaire_sample)
food_process <- calc_food_emissions_process(questionnaire_sample)
tran_process <- calc_transport_emissions_process(questionnaire_sample)
hous_process <- calc_housing_emissions_process(questionnaire_sample)
pets_process <- calc_pet_emissions_process(questionnaire_sample)
total_process <- calc_total_emissions_process(questionnaire_sample)
## test
remove.packages("SECFC")
## load all
devtools::load_all("D:/paper/creapackagesecfc/SECFC")
## Check if function exists
ls("package:SECFC")
## test
remove.packages("SECFC")
devtools::install("D:/paper/creapackagesecfc/SECFC")
devtools::check("D:/paper/creapackagesecfc/SECFC")
#use the package
library(SECFC)
#import the dataset "questionnaire_sample" by using readRDS function
questionnaire_sample <- readRDS("D:/paper/creapackagesecfc/questionnaire_sample.rds")
#change the path to your stored data
# Run all emission calculation functions sequentially
cons <- calc_cons_emissions(questionnaire_sample)
food <- calc_food_emissions(questionnaire_sample)
tran <- calc_transport_emissions(questionnaire_sample)
hous <- calc_housing_emissions(questionnaire_sample)
pets <- calc_pet_emissions(questionnaire_sample)
total <- calc_total_emissions(questionnaire_sample)
cons_process <- calc_cons_emissions_process(questionnaire_sample)
food_process <- calc_food_emissions_process(questionnaire_sample)
tran_process <- calc_transport_emissions_process(questionnaire_sample)
hous_process <- calc_housing_emissions_process(questionnaire_sample)
pets_process <- calc_pet_emissions_process(questionnaire_sample)
total_process <- calc_total_emissions_process(questionnaire_sample)
## load all
devtools::load_all("D:/paper/creapackagesecfc/SECFC")
## Check if function exists
ls("package:SECFC")
## test
remove.packages("SECFC")
devtools::install("D:/paper/creapackagesecfc/SECFC")
devtools::check("D:/paper/creapackagesecfc/SECFC")
questionnaire_sample <- readRDS("D:/paper/creapackagesecfc/questionnaire_sample.rds")
#use the package
library(SECFC)
#import the dataset "questionnaire_sample" by using readRDS function
questionnaire_sample <- readRDS("D:/paper/creapackagesecfc/questionnaire_sample.rds")
#change the path to your stored data
# Run all emission calculation functions sequentially
cons <- calc_cons_emissions(questionnaire_sample)
food <- calc_food_emissions(questionnaire_sample)
tran <- calc_transport_emissions(questionnaire_sample)
hous <- calc_housing_emissions(questionnaire_sample)
pets <- calc_pet_emissions(questionnaire_sample)
total <- calc_total_emissions(questionnaire_sample)
cons_process <- calc_cons_emissions_process(questionnaire_sample)
food_process <- calc_food_emissions_process(questionnaire_sample)
tran_process <- calc_transport_emissions_process(questionnaire_sample)
hous_process <- calc_housing_emissions_process(questionnaire_sample)
pets_process <- calc_pet_emissions_process(questionnaire_sample)
total_process <- calc_total_emissions_process(questionnaire_sample)
questionnaire_sample <- readRDS("D:/paper/SECFC-project/questionnaire_sample.rds")
## load all
devtools::load_all("D:/paper/creapackagesecfc/SECFC")
## load all
devtools::load_all("D:/paper/SECFC-project/SECFC")
## load all
devtools::load_all("D:/paper/SECFC-project/SECFC")
## load all
devtools::load_all("D:/paper/creatpackagesecfc/SECFC")
usethis::git_sitrep()
setwd("C:/Users/22561/Nutstore/1/GitHub/buildsecfc copy/SECFC")
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
# Preview your site locally before publishing
pkgdown::build_site()
setwd("C:/Users/22561/Nutstore/1/GitHub/buildsecfc copy/SECFC")
setwd("C:/Users/22561/Nutstore/1/GitHub/buildsecfc copy/SECFC/docs")
setwd("C:/Users/22561/Nutstore/1/GitHub/buildsecfc copy/SECFC/docs")
